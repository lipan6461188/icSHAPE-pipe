#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os, sys, pysam, numpy, getopt, random, re
from matplotlib.gridspec import GridSpec
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import pandas as pd
import version

dirname = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, dirname+'/../../GAP')

import GAP

Usage = """
samStatistic - Report the sam or bam
=============================================================
\x1b[1mUSAGE:\x1b[0m 
  %s [-s 0.1] -i input.sam -g *.genomeCoor.bed -o report.pdf -t report.txt
\x1b[1mHELP:\x1b[0m
  -i                    <String>
                                Input a sam or bam file, each read must be output for one time
  -o                    <String>
                                Output directory to contain the results
  --fast                <None>
                                Fast mode, sample reads to analysis (default: all reads will be analized)
  -g                    <String>
                                A genome-coor based annotation file: hg38.genomeCoor.bed (generated by parseGTF)

\x1b[1mWARNING\x1b[0m
    1. Each mapped read should be output for only one time (--outSAMmultNmax 1);
    2. Each mapped read should contain MD tag (such as MD:Z:35);
    3. Unmapped reads should be append in sam/bam file (--outSAMunmapped Within);
    4. -g Annotation was built with <icSHAPE-pipe parseGTF>

\x1b[1mVERSION:\x1b[0m
    %s

\x1b[1mAUTHOR:\x1b[0m
    Li Pan

""" % (sys.argv[0], version.Version)

def load_getoutput():
    import subprocess
    if 'getoutput' in dir(subprocess):
        return subprocess.getoutput
    else:
        import commands
        return commands.getoutput

getoutput = load_getoutput()

def init():
    params = { 'inFile': None, 'outFolder': None, 'fast': False, 'annotation': None }
    opts, args = getopt.getopt(sys.argv[1:], 'hi:o:g:t:', ['fast'])
    for op, value in opts:
        if op == '-h':
            sys.stderr.writelines(Usage+"\n")
            sys.exit(-1)
        # Basic Parameters
        elif op == '-i':
            params['inFile'] = os.path.abspath(value)
        elif op == '-o':
            params['outFolder'] = os.path.abspath(value).rstrip('/') + '/'
        elif op == '--fast':
            params['fast'] = True
        elif op == '-g':
            params['annotation'] = os.path.abspath(value)
        
        else:
            sys.stderr.writelines("Error: unrecognized parameter: "+op+"\n")
            print(Usage)
            sys.exit(-1)
    # check
    if not params['inFile'] or not params['annotation'] or not params['outFolder']:
        sys.stderr.writelines("Error: Please specify -i/-g/-o"+"\n")
        print(Usage)
        sys.exit(-1)
    
    return params

def get_mute_list(MDCode):
    mute_list = []
    
    match_list = re.split("[ATGC^N]", MDCode)[:-1]
    ext_len = 0
    for cur_len in match_list:
        cur_len = 1 if cur_len == '' else int(cur_len)
        ext_len += cur_len
        mute_list.append(ext_len)
        ext_len += 1
    
    return mute_list

def estimate_sample_ratio(inBam):
    CMD = "samtools view --threads 3 %s | wc -l" % (inBam, )
    count = int(getoutput(CMD))
    if count < 1000000:
        return None
    else:
        return 1000000.0 / count

def where_reads_map_to(inSam, Parser, sample=None):
    
    geneParser = Parser.getGeneParser(showAttr=False)
    
    ## Mapped reads classification
    TotalCount = 0
    Unmap = 0
    Exon = {}
    Intron = {}
    Intergenic = 0
    Unannot = 0
    readLen = {}
    
    ## Mutation profile
    mutTotalCount = 0
    mutProf_leading = [0] * 15
    mutProf_tailing = [0] * 15
    
    if inSam.endswith('sam') or inSam.endswith('bam'):
        IN = pysam.AlignmentFile(inSam, "r")
    else:
        sys.stderr.writelines("Error: input must be a sam or bam file"+"\n")
        exit(-1)
    
    last_query_id = ""
    for alignSeg in IN:
        
        cur_query_name = alignSeg.query_name
        if cur_query_name == last_query_id:
            sys.stderr.writelines("Error: Each reads should be output for one time (--outSAMmultNmax 1)"+"\n")
            exit(-1)
        last_query_id = cur_query_name
        
        TotalCount += 1
        if TotalCount % 100000 == 0:
            print("lines "+str(TotalCount))
        #if TotalCount == 10000000:
        #    break
        
        if sample:
            if random.random() > sample:
                continue
        
        Len = len(alignSeg.seq)
        readLen[Len] = readLen.get(Len, 0) + 1
        
        if alignSeg.is_unmapped:
            Unmap += 1
            continue
        
        mutTotalCount += 1
        MDCode = dict(alignSeg.tags)['MD']
        muteList = get_mute_list(MDCode)
        seq_len = len(alignSeg.seq)
        for coor in muteList:
            if coor < len(mutProf_leading):
                mutProf_leading[coor] += 1
            else:
                index = (coor+1)-(seq_len-15)
                if 0 <= index < len(mutProf_tailing):
                    mutProf_tailing[index] += 1
        
        chrID = alignSeg.reference_name
        mapStart = alignSeg.pos + 1
        mapEnd = mapStart + alignSeg.alen
        strand = '-' if alignSeg.is_reverse else '+'
        
        try:
            geneList = Parser.genomeCoor2geneCoor(chrID, mapStart, mapEnd, strand)
        except KeyError:
            Unannot += 1
            continue
        
        if len(geneList)==0:
            Intergenic += 1
        else:
            transList = Parser.genomeCoor2transCoor(chrID, mapStart, mapEnd, strand)
            mapGeneGeneIDSet = set([it[3] for it in geneList])
            mapGeneTransIDSet = set()
            for gid in mapGeneGeneIDSet:
                for tid in geneParser[gid]['transcript']:
                    mapGeneTransIDSet.add(tid)
            mapTransTransIDSet = set([it[3] for it in transList])
            #mapTransGeneIDSet = set([ Parser.getTransFeature(tid)['gene_id'] for tid in mapTransTransIDSet ])
            
            assert mapGeneTransIDSet >= mapTransTransIDSet
            
            if len(mapTransTransIDSet) != 0:
                valid_trans = []
                for tid in mapTransTransIDSet:
                    #gene_start = geneParser[gid]['start']
                    #gene_end = geneParser[gid]['end']
                    ft = Parser.getTransFeature(tid)
                    if ft['start'] <= mapStart < mapEnd <= ft['end']:
                        valid_trans.append(tid)
                if len(valid_trans) == 0:
                    #print("Warning: unexpected map -- gap length = "+str(mapEnd-mapStart))
                    if mapEnd-mapStart > 10000:
                        Unannot += 1
                        continue
                    valid_trans = list(mapTransTransIDSet)
                for tid in valid_trans:
                    #gt = format_gene_type(Parser.getTransFeature(tid)['gene_type'])
                    gt = Parser.getTransFeature(tid)['gene_type']
                    Exon[ gt ] = Exon.get(gt, 0) + 1.0/len(valid_trans)
            
            else:
                valid_trans = []
                for tid in mapGeneTransIDSet:
                    ft = Parser.getTransFeature(tid)
                    if ft['start'] <= mapStart < mapEnd <= ft['end']:
                        valid_trans.append(tid)
                if len(valid_trans) == 0:
                    #print("Warning: unexpected map -- gap length = "+str(mapEnd-mapStart))
                    if mapEnd-mapStart > 10000:
                        Unannot += 1
                        continue
                    valid_trans = list(mapTransTransIDSet)
                for tid in valid_trans:
                    #gt = format_gene_type(Parser.getTransFeature(tid)['gene_type'])
                    gt = Parser.getTransFeature(tid)['gene_type']
                    Intron[ gt ] = Intron.get(gt, 0) + 1.0/len(valid_trans)
    
    for i in range(len(mutProf_leading)):
        mutProf_leading[i] = round(1.0*mutProf_leading[i]/mutTotalCount, 3)
    
    for i in range(len(mutProf_tailing)):
        mutProf_tailing[i] = round(1.0*mutProf_tailing[i]/mutTotalCount, 3)
    
    lens = sorted(list(readLen.keys()))
    readLens = [ (l,readLen[l]) for l in lens ]
    
    Objs = { 
        'TotalCountNum': TotalCount,
        'UnmapNum': Unmap,
        'ExonDict': Exon,
        'IntronDict': Intron,
        'IntergenicNum': Intergenic,
        'UnannotNum': Unannot,
        'mutProfLeadingList': mutProf_leading,
        'mutProfTailingList': mutProf_tailing,
        'readLensList': readLens
    }
    
    return Objs

def build_sorted_list(inDict):
    myList = []
    for k in inDict:
        myList.append((k, inDict[k]))
    
    myList.sort(key=lambda x: x[1], reverse=True)
    return myList

def plot_base_pie(df_data, outfn):
    colors = list(df_data['color'])
    data = list(df_data['count'])
    labels = list(df_data['label'])
    total = sum(data)
    gene_ratio = [ it/total for it in data ]
    
    plt.figure(figsize=(4,4))
    genelabels = [ "%s(%d%%)"%(b,100*r) for b,r in zip(labels,gene_ratio) ]
    plt.pie(gene_ratio, labels=genelabels, colors=colors, startangle=140, shadow=False, rotatelabels=False);
    plt.axis('equal');
    plt.tight_layout()
    plt.savefig(outfn)
    plt.close()

param = init()
if not os.path.exists(param['outFolder']):
    os.mkdir(param['outFolder'])

if not os.path.exists(param['outFolder']+'img'):
    os.mkdir(param['outFolder']+'img')

print("Start to read annotation file...")
Parser = GAP.init(param['annotation'], showAttr=False)

ratio = None
if param['fast']:
    print("Start to estimate sample ratio...")
    ratio = estimate_sample_ratio(param['inFile'])
    print("Fast mode, sample ratio: %s" % (ratio, ))

MapObj = where_reads_map_to(param['inFile'], Parser, sample=ratio)
TotalCount = MapObj['TotalCountNum']
Unmap = MapObj['UnmapNum']
Exon = MapObj['ExonDict']
Intron = MapObj['IntronDict']
Intergenic = MapObj['IntergenicNum']
Unannot = MapObj['UnannotNum']
mutProf_leading = MapObj['mutProfLeadingList']
mutProf_tailing = MapObj['mutProfTailingList']
readLens = MapObj['readLensList']

Map_list = build_sorted_list({
    'un-mapped':Unmap, 
    'exon': sum(Exon.values()), 
    'intron': sum(Intron.values()), 
    'intergenic':Intergenic,
    'un-annotated': Unannot
}); Map_list.sort(key=lambda x:x[1], reverse=True)

Exon_list = list(Exon.items()); Exon_list.sort(key=lambda x:x[1], reverse=True)
Intron_list = list(Intron.items()); Intron_list.sort(key=lambda x:x[1], reverse=True)

##### Mutation profile

mutProf = mutProf_leading + [0, 0, 0] + mutProf_tailing

fig, axs = plt.subplots(nrows=1, ncols=1, figsize=(12, 3), sharey=True)
xticks = [str(i) for i in range(1,16)] + ["", "", ""] + [str(i) for i in range(-15,0)]
obj = axs.bar(range(len(mutProf)), mutProf, color='#B4B4B5')
axs.title.set_text("Nucleotide mutation profile")
axs.title.set_size('large')
axs.title.set_weight('bold')
axs.set_xticks(range(len(mutProf)))
axs.set_xticklabels(xticks)
axs.set_ylabel("Mutation ratio")
axs.set_xlabel("Nucleotide position in reads")
fig.tight_layout()
fig.savefig(param['outFolder']+'img/mutprofile.png')

##### Reads length distribution

x = [ it[0] for it in readLens ]
y = [ it[1] for it in readLens ]

fig, axs = plt.subplots(nrows=1, ncols=1, figsize=(12, 3), sharey=True)
obj = axs.bar(x, y, color='#B4B4B5')
axs.title.set_text("Distribution of length of reads")
axs.title.set_size('large')
axs.title.set_weight('bold')
axs.set_ylabel("Number of sampled reads")
axs.set_xlabel("Read length")
fig.tight_layout()
fig.savefig(param['outFolder']+'img/readlength.png')


html = """
<!DOCTYPE html>
<html>
<head>
<title>Sam file statistics</title>
<meta http-equiv=Content-Type content="text/html;charset=utf-8">
<meta name="viewport" content="width=device-width;initial-scale=1.0">
<link rel="stylesheet" type="text/css" href="https://www.w3schools.com/w3css/4/w3.css">
</head>
<body>
<div class="w3-content" style="max-width: 1000px">
    <div class="w3-panel w3-pink w3-center"><h3>{0}</h3></div>
    <p>command: {1}</p>
    
    <div class="w3-container w3-section">
        <h3>1. Basic Information</h3>
        <p>{2}</p>
    </div>

    <div class="w3-container w3-section">
        <h3>2. Mapping of data</h3>
        <p>The following table and pie chart count the mapping rate of reads and the ratio of mapping to annotated genes and intergenic regions.</p>
        <table class="w3-table-all" style="width:100%">
            <tr>
                <th>Type</th>
                <th>Sampled number</th>
                <th>Est. ratio</th>
            </tr>
            {3}
        </table>
    </div>

    <div class="w3-container w3-section">
        <h3>3. Mapping on Exon</h3>
        <p>The table below and the pie chart record the proportion of reads on each gene exon.</p>
        <table class="w3-table-all" style="width:100%">
            <tr>
                <th>Type</th>
                <th>Sampled number</th>
                <th>Est. ratio</th>
            </tr>
            {4}
        </table>
    </div>

    <div class="w3-container w3-section">
        <h3>4. Mapping on Intron</h3>
        <p>The table below and the pie chart record the proportion of reads on each gene intron.</p>
        <table class="w3-table-all" style="width:100%">
            <tr>
                <th>Type</th>
                <th>Sampled number</th>
                <th>Est. ratio</th>
            </tr>
            {5}
        </table>
    </div>

    <div class="w3-container w3-section">
        <h3>5. Reads mutation profile</h3>
        <p>The histogram below shows the average mutation rate of each base on the map region of reads.</p>
        <div style="width:100%">
            <img src="img/mutprofile.png" alt="mutation profile" width="100%" />
        </div>
    </div>

    <div class="w3-container w3-section">
        <h3>6. Reads Length</h3>
        <p>The figure below shows the distribution of the sampled read length.</p>
        <div style="width:100%">
            <img src="img/readlength.png" alt="read length" width="100%" />
        </div>
    </div>
</div>
</body>
</html>
"""


html_table_row_temp = "                        <tr><td>%s</td><td>%s</td><td>%.2f%%</td></tr>\n"
basic_info_temp = "There are a total of %s reads, "

basic_info = basic_info_temp % ("{:,}".format(int(TotalCount)), )
if ratio:
    basic_info += "and the sample rate is %.3f" % (ratio, )
else:
    basic_info += "use all reads to count"

map_row = ""
total = sum([it[1] for it in Map_list])
for map_type,count in Map_list:
    map_row += html_table_row_temp % ( map_type, "{:,}".format(int(count)), 100.0*count/total )

exon_row = ""
total = sum([it[1] for it in Exon_list])
for map_type,count in Exon_list:
    exon_row += html_table_row_temp % ( map_type, "{:,}".format(int(count)), 100.0*count/total )

intron_row = ""
total = sum([it[1] for it in Intron_list])
for map_type,count in Intron_list:
    intron_row += html_table_row_temp % ( map_type, "{:,}".format(int(count)), 100.0*count/total )

pure_file = param['inFile'].split('/')[-1]
command = " ".join(sys.argv)

OUT = open(param['outFolder']+'report.html', 'w')
OUT.writelines(html.format(pure_file, command, basic_info, map_row, exon_row, intron_row))
OUT.close()


"""

sys.argv = ['bin', '-i','/Share/home/zhangqf8/test/Structure_Database/test/test.unsorted.bam', 
            '-o', '/Share/home/zhangqf8/test/Structure_Database/test/report', 
            '-g', '/150T/zhangqf/GenomeAnnotation/Gencode/hg38.genomeCoor.bed' ]

"""


